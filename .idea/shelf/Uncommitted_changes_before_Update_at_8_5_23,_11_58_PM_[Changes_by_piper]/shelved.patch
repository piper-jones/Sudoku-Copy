Index: Sudoku_Project17/sudoku_generator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import math,random\n\n\"\"\"\nThis was adapted from a GeeksforGeeks article \"Program for Sudoku Generator\" by Aarti_Rathi and Ankur Trisal\nhttps://www.geeksforgeeks.org/program-sudoku-generator/\n\n\"\"\"\n\nclass SudokuGenerator:\n    '''\n\tcreate a sudoku board - initialize class variables and set up the 2D board\n\tThis should initialize:\n\tself.row_length\t\t- the length of each row\n\tself.removed_cells\t- the total number of cells to be removed\n\tself.board\t\t\t- a 2D list of ints to represent the board\n\tself.box_length\t\t- the square root of row_length\n\n\tParameters:\n    row_length is the number of rows/columns of the board (always 9 for this project)\n    removed_cells is an integer value - the number of cells to be removed\n\n\tReturn:\n\tNone\n    '''\n    def __init__(self, row_length, removed_cells):\n        self.row_length = row_length\n\tself.removed_cells = removed_cells\n\tself.box_length = row_length ** 0.5\n\tself.board = []\n\n    '''\n\tReturns a 2D python list of numbers which represents the board\n\n\tParameters: None\n\tReturn: list[list]\n    '''\n    def get_board(self):\n        for i in range(int(self.row_length)):\n\t\trow = []\n\t\tfor j in range(int(self.row_length)):\n\t\t\trow.append(0)\n\t\tself.board.append(row)\n\treturn self.board\n\n    '''\n\tDisplays the board to the console\n    This is not strictly required, but it may be useful for debugging purposes\n\n\tParameters: None\n\tReturn: None\n    '''\n    def print_board(self):\n        for i in range(len(self.board)):\n            for j in range(len(self.board[i])):\n                print(self.board[i][j],end='')\n        print()\n\n    '''\n\tDetermines if num is contained in the specified row (horizontal) of the board\n    If num is already in the specified row, return False. Otherwise, return True\n\n\tParameters:\n\trow is the index of the row we are checking\n\tnum is the value we are looking for in the row\n\t\n\tReturn: boolean\n    '''\n    def valid_in_row(self, row, num):\n        return self.board[row].count(num) == 0\n\n    '''\n\tDetermines if num is contained in the specified column (vertical) of the board\n    If num is already in the specified col, return False. Otherwise, return True\n\n\tParameters:\n\tcol is the index of the column we are checking\n\tnum is the value we are looking for in the column\n\t\n\tReturn: boolean\n    '''\n    def valid_in_col(self, col, num):\n        for row in range(len(self.board)):\n            if self.board[row][col] == num:\n                return False\n        return True\n\n    '''\n\tDetermines if num is contained in the 3x3 box specified on the board\n    If num is in the specified box starting at (row_start, col_start), return False.\n    Otherwise, return True\n\n\tParameters:\n\trow_start and col_start are the starting indices of the box to check\n\ti.e. the box is from (row_start, col_start) to (row_start+2, col_start+2)\n\tnum is the value we are looking for in the box\n\n\tReturn: boolean\n    '''\n    def valid_in_box(self, row_start, col_start, num):\n        for i in range(row_start,row_start+3):\n            for y in range(col_start,col_start+3):\n                if self.board[i][y] == num:\n                    return False\n        return True\n\n    \n    '''\n    Determines if it is valid to enter num at (row, col) in the board\n    This is done by checking that num is unused in the appropriate, row, column, and box\n\n\tParameters:\n\trow and col are the row index and col index of the cell to check in the board\n\tnum is the value to test if it is safe to enter in this cell\n\n\tReturn: boolean\n    '''\n    def is_valid(self, row, col, num):\n        self.valid_in_row(self,row,num)\n        self.valid_in_col(self,col,num)\n        self.valid_in_box(self, row, col, num)\n        if False:\n            return False\n        else:\n            return True\n\n    '''\n    Fills the specified 3x3 box with values\n    For each position, generates a random digit which has not yet been used in the box\n\n\tParameters:\n\trow_start and col_start are the starting indices of the box to check\n\ti.e. the box is from (row_start, col_start) to (row_start+2, col_start+2)\n\n\tReturn: None\n    '''\n    def fill_box(self, row_start, col_start):\n        for row in range(row_start, row_start + 3):\n            for col in range(col_start, col_start + 3):\n                (self.board[row][col]).append(random.sample(range(1, 10), 9))\n        return None\n    \n    '''\n    Fills the three boxes along the main diagonal of the board\n    These are the boxes which start at (0,0), (3,3), and (6,6)\n\n\tParameters: None\n\tReturn: None\n    '''\n    def fill_diagonal(self):\n        self.fill_box(0, 0)\n        self.fill_box(3, 3)\n        self.fill_box(6, 6)\n\n    '''\n    DO NOT CHANGE\n    Provided for students\n    Fills the remaining cells of the board\n    Should be called after the diagonal boxes have been filled\n\t\n\tParameters:\n\trow, col specify the coordinates of the first empty (0) cell\n\n\tReturn:\n\tboolean (whether or not we could solve the board)\n    '''\n    def fill_remaining(self, row, col):\n        if (col >= self.row_length and row < self.row_length - 1):\n            row += 1\n            col = 0\n        if row >= self.row_length and col >= self.row_length:\n            return True\n        if row < self.box_length:\n            if col < self.box_length:\n                col = self.box_length\n        elif row < self.row_length - self.box_length:\n            if col == int(row // self.box_length * self.box_length):\n                col += self.box_length\n        else:\n            if col == self.row_length - self.box_length:\n                row += 1\n                col = 0\n                if row >= self.row_length:\n                    return True\n        \n        for num in range(1, self.row_length + 1):\n            if self.is_valid(row, col, num):\n                self.board[row][col] = num\n                if self.fill_remaining(row, col + 1):\n                    return True\n                self.board[row][col] = 0\n        return False\n\n    '''\n    DO NOT CHANGE\n    Provided for students\n    Constructs a solution by calling fill_diagonal and fill_remaining\n\n\tParameters: None\n\tReturn: None\n    '''\n    def fill_values(self):\n        self.fill_diagonal()\n        self.fill_remaining(0, self.box_length)\n\n    '''\n    Removes the appropriate number of cells from the board\n    This is done by setting some values to 0\n    Should be called after the entire solution has been constructed\n    i.e. after fill_values has been called\n    \n    NOTE: Be careful not to 'remove' the same cell multiple times\n    i.e. if a cell is already 0, it cannot be removed again\n\n\tParameters: None\n\tReturn: None\n    '''\n    def remove_cells(self):\n        count = self.removed_cells\n        while count != 0:\n            random_row = random.randint(0, 8)\n            random_col = random.randint(0, 8)\n            if self.board[random_row][random_col] != 0:\n                self.board[random_row][random_col] = 0\n                count -= 1\n\n\n'''\nDO NOT CHANGE\nProvided for students\nGiven a number of rows and number of cells to remove, this function:\n1. creates a SudokuGenerator\n2. fills its values and saves this as the solved state\n3. removes the appropriate number of cells\n4. returns the representative 2D Python Lists of the board and solution\n\nParameters:\nsize is the number of rows/columns of the board (9 for this project)\nremoved is the number of cells to clear (set to 0)\n\nReturn: list[list] (a 2D Python list to represent the board)\n'''\ndef generate_sudoku(size, removed):\n    sudoku = SudokuGenerator(size, removed)\n    sudoku.fill_values()\n    board = sudoku.get_board()\n    sudoku.remove_cells()\n    board = sudoku.get_board()\n    return board\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Sudoku_Project17/sudoku_generator.py b/Sudoku_Project17/sudoku_generator.py
--- a/Sudoku_Project17/sudoku_generator.py	(revision 1b0a285e8375b6a652bb917d87edc5f94404d2f6)
+++ b/Sudoku_Project17/sudoku_generator.py	(date 1691294234232)
@@ -36,9 +36,9 @@
     '''
     def get_board(self):
         for i in range(int(self.row_length)):
-		row = []
-		for j in range(int(self.row_length)):
-			row.append(0)
+		    row = []
+		    for j in range(int(self.row_length)):
+			    row.append(0)
 		self.board.append(row)
 	return self.board
 
